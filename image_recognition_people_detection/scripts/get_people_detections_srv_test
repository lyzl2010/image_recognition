#!/usr/bin/env python
from __future__ import print_function

import argparse
import time

import cv2
import rospy
from cv_bridge import CvBridge
from image_recognition_msgs.srv import DetectPeople, DetectPeopleRequest

parser = argparse.ArgumentParser(description='Get people detections')
parser.add_argument('-v', '--verbose', help="Increase output verbosity", action="store_true")
parser.add_argument('-s', '--service_name', help="Service name", required=True)

mode_parser = parser.add_subparsers(help='Mode')
image_parser = mode_parser.add_parser('image', help='Use image mode')
image_parser.set_defaults(mode='image')
image_parser.add_argument('image', help='Input image')

cam_parser = mode_parser.add_parser('cam', help='Use cam mode')
cam_parser.set_defaults(mode='cam')
cam_parser.add_argument('--rate', default=3.0, type=float, help='Input image')

args = parser.parse_args()

rospy.init_node('get_people_detections_srv_test')

srv = rospy.ServiceProxy(args.service_name, DetectPeople)
rospy.loginfo("Waiting for service {} ...".format(srv.resolved_name))
srv.wait_for_service()

cv_bridge = CvBridge()

if args.mode == 'image':
    image = cv2.imread(args.image)
    imgmsg = cv_bridge.cv2_to_imgmsg(image, "bgr8")

    resp = srv(DetectPeopleRequest(image=imgmsg))
    rospy.loginfo(resp)

elif args.mode == 'cam':
    cap = cv2.VideoCapture(0)
    prev = 0
    while not rospy.is_shutdown():

        time_elapsed = time.time() - prev
        res, image = cap.read()
        image_msg = cv_brige.cv2_to_imgmsg(image, "bgr8")

        if time_elapsed > 1. / args.rate:
            prev = time.time()

            resp = srv(DetectPeopleRequest(image=image_msg))
            rospy.loginfo(resp)

