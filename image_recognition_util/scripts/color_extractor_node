#! /usr/bin/env python

# ROS libraries
import rospy
from cv_bridge import CvBridge, CvBridgeError

# Image recognition repository imports
from image_recognition_util import ColorExtractor
from image_recognition_msgs.srv import ExtractColor, ExtractColorResponse

class ColorExtractorNode:
    def __init__(self):
        # initialize parameters
        total_colors = self._get_param('~total_colors', 3)
        self._bridge = CvBridge()
        self._color_extractor = ColorExtractor(total_colors)

        # services
        self._extract_color_srv = rospy.Service('extract_color', ExtractColor, self._extract_color_srv)

    def _get_param(self, name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

    def _extract_color_srv(self, req):
        img = self._bridge.imgmsg_to_cv2(req.image, desired_encoding="passthrough")
        colors, return_message = self._color_extractor.recognize(img)

        if return_message:
            rospy.loginfo(return_message)

        return ExtractColorResponse(colors=colors)


if __name__ == "__main__":
    rospy.init_node('color_extractor')
    node = ColorExtractorNode()
    rospy.spin()

